# Template file for 'linux3.16-ck'
#
pkgname=linux3.16-ck
version=3.16.6
revision=2
wrksrc="linux-${version}"
maintainer="John Galt <johngaltfirstrun@gmail.com>"
homepage="http://www.kernel.org"
license="GPL-2"
short_desc="Colin Kolivas patched Linux kernel and modules (${version%.*} series)"
distfiles="https://www.kernel.org/pub/linux/kernel/v3.x/linux-${version}.tar.xz
	http://ck.kolivas.org/patches/3.0/3.16/3.16-ck2/patch-3.16-ck2.bz2"
checksum="31e9dcffd79933040b8a91d36ac1d75fa4ad554656665c3d9c8fbd9fa73006f2
	7f04f035e7e2f65e3b799508b25bb2f7e717ee0b2330ba1097f05b56ed36b02a"

_kernver="${version}ck_${revision}"

nostrip=yes
noverifyrdeps=yes
preserve=yes
only_for_archs="i686 x86_64"
makedepends="bc perl kmod>=11_2 libressl-openssl elfutils"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
	/usr/lib/modules/${_kernver}/modules.dep
	/usr/lib/modules/${_kernver}/modules.dep.bin
	/usr/lib/modules/${_kernver}/modules.symbols
	/usr/lib/modules/${_kernver}/modules.symbols.bin
	/usr/lib/modules/${_kernver}/modules.alias
	/usr/lib/modules/${_kernver}/modules.alias.bin
	/usr/lib/modules/${_kernver}/modules.devname"

post_extract() {
	patch -p1 < ../patch-3.16-ck2
}

do_configure() {
	# If there's a file called <arch>-dotconfig, use it to
	# configure the kernel; otherwise use arch defaults and all stuff
	# as modules (defconfig+allmodconfig).
	local arch

	if [ "$XBPS_TARGET_MACHINE" != "x86_64" ]; then
		arch=i386
	else
		arch=x86_64
	fi

	if [ -f ${FILESDIR}/${arch}-dotconfig-custom ]; then
		msg_normal "Detected a custom .config file for your arch, using it.\n"
		cp -f ${FILESDIR}/${arch}-dotconfig-custom .config
		make ${makejobs} oldconfig
	elif [ -f ${FILESDIR}/${arch}-dotconfig ]; then
		msg_normal "Detected a .config file for your arch, using it.\n"
		cp -f ${FILESDIR}/${arch}-dotconfig .config
		make ${makejobs} oldconfig
	else
		msg_normal "Defaulting to 'defconfig and allmodconfig'.\n"
		make ${makejobs} defconfig
		make ${makejobs} allmodconfig
	fi
	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_${revision}\"|" .config
}

do_build() {
	make EXTRAVERSION=ck ${makejobs} prepare
	make EXTRAVERSION=ck ${makejobs} bzImage modules
}

do_install() {
	local arch hdrdest

	if [ "$XBPS_TARGET_MACHINE" != "x86_64" ]; then
		arch=i386
	else
		arch=x86_64
	fi

	# Run depmod after compressing modules.
	sed -i '2iexit 0' scripts/depmod.sh

	# Install kernel, firmware and modules
	make ${makejobs} INSTALL_MOD_PATH=${DESTDIR} modules_install

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	install -Dm644 .config ${DESTDIR}/boot/config-${_kernver}
	install -Dm644 arch/x86/boot/bzImage \
		${DESTDIR}/boot/vmlinuz-${_kernver}
	install -Dm644 System.map \
		${DESTDIR}/boot/System.map-${_kernver}

	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config
	mkdir -p ${hdrdest}/include
	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in acpi asm-generic config crypto drm generated linux math-emu \
		media net pcmcia scsi sound trace uapi video xen; do
		if [ -d include/$i ]; then
			cp -a include/$i ${hdrdest}/include
		fi
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/x86
	cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}

	mkdir -p ${hdrdest}/arch/x86/kernel
	cp arch/x86/Makefile ${hdrdest}/arch/x86
	if [ "$arch" = "i386" ]; then
		cp arch/x86/Makefile_32.cpu ${hdrdest}/arch/x86
	fi
	cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	# add headers for lirc package
	# pci
	for i in bt8xx cx88 saa7134; do
		mkdir -p ${hdrdest}/drivers/media/pci/${i}
		cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
	done
	# usb
	for i in cpia2 em28xx pwc; do
		mkdir -p ${hdrdest}/drivers/media/usb/${i}
		cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
	done
	# i2c
	mkdir -p ${hdrdest}/drivers/media/i2c
	cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
	for i in cx25840; do
		mkdir -p ${hdrdest}/drivers/media/i2c/${i}
		cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
	done

	# Add docbook makefile
	install -Dm644 Documentation/DocBook/Makefile \
		${hdrdest}/Documentation/DocBook/Makefile

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# add dvb headers for external modules
	mkdir -p ${hdrdest}/drivers/media/dvb-core
	cp drivers/media/dvb-core/*.h ${hdrdest}/drivers/media/dvb-core/
	mkdir -p ${hdrdest}/include/config/dvb/
	cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

	# add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/lgdt330x.h \
		${hdrdest}/drivers/media/dvb-frontends/
	cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

	# add dvb headers
	mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
	cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
	mkdir -p ${hdrdest}/drivers/media/tuners
	cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/xfs_sb.h ${hdrdest}/fs/xfs/xfs_sb.h

	# Copy in Kconfig files
	for i in $(find . -name "Kconfig*"); do
		mkdir -p ${hdrdest}/$(echo $i | sed 's|/Kconfig.*||')
		cp $i ${hdrdest}/$i
	done

	# Remove unneeded architectures
	for arch in alpha arm* avr32 blackfin cris frv h8300 \
		ia64 m* p* s* um v850 xtensa; do
		rm -rf ${hdrdest}/arch/${arch}
	done

	# Compress all modules with gzip to save a few MBs.
	msg_normal "$pkgver: compressing kernel modules with gzip, please wait...\n"
	find ${DESTDIR} -name '*.ko' -exec gzip -9 {} \;

	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

linux3.16-ck-headers_package() {
	preserve=yes
	nostrip=yes
	noverifyrdeps=yes
	short_desc+=" - source headers for 3rd party modules"
	pkg_install() {
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	}
}
